import { Leaf } from "../../meh/index.js";
const log = console.log;
export const create = (args, ac, dest) => {
    const compo = new Component(args, ac);
    if (compo.output.main)
        compo.output.main.connect(dest ?? ac.destination);
};
//  //
class Component {
    ac;
    output = {};
    nodes = {};
    constructor(args, ac) {
        this.ac = ac;
        if (args.constants) {
            for (let name in args.constants)
                this.createConst(name, args.constants[name]);
        }
        if (args.nodes) {
            for (let name in args.nodes)
                this.createNode(name, args.nodes[name]);
            for (let name in args.nodes)
                this.connectNodeSrc(name, args.nodes[name]);
        }
        if (args.output)
            for (let name in args.output)
                this.setupOutput(name, args.output[name]);
    }
    //  //
    setupOutput(name, spec) {
        const node = this.getSource(spec);
        if (node)
            this.output[name] = node;
    }
    createConst(name, args) {
        const node = this.ac.createConstantSource();
        const lol = args.value;
        if (lol instanceof Leaf.Number) {
            const update = () => {
                const curr = this.ac.currentTime;
                const len = args.time ?? 0.01;
                const value = (args.cv ?
                    args.cv(lol.value) :
                    lol.value * (args.gain ?? 1));
                node.offset.cancelAndHoldAtTime(curr);
                node.offset.setTargetAtTime(value, curr, len);
            };
            node.offset.value = 0;
            lol.createRef(update);
        }
        else if (typeof lol == "number")
            node.offset.value = lol;
        this.nodes[name] = node;
        node.start();
    }
    createNode(name, args) {
        if (typeof args.type != "string") {
            new Component(args.type, this.ac);
            return;
        }
        const nf = NF[args.type];
        if (!nf)
            return;
        this.nodes[name] = nf(args, this.ac);
    }
    //  //
    connectNodeSrc(name, args) {
        const node = this.nodes[name];
        if (!node)
            return;
        if (args.sources)
            for (let srcspec of args.sources) {
                this.connect(node, srcspec);
            }
        if (args.params)
            this.connectParams(node, args.params);
    }
    connectParams(node, args) {
        for (let paramName in args) {
            for (const paramSrc of args[paramName]) {
                this.connectParam(node, paramName, paramSrc);
            }
        }
    }
    connectParam(node, paramName, src) {
        const param = node[paramName];
        if (!(param instanceof AudioParam))
            return;
        if (typeof src == "number") {
            log("param", paramName, src);
            param.value = src;
        }
        else {
            const source = this.getSource(src);
            if (source)
                source.connect(param);
            log("param", { paramName, src }, source?.constructor.name);
        }
    }
    connect(node, srcspec) {
        const source = this.getSource(srcspec);
        if (source)
            source.connect(node);
    }
    getSource(spec) {
        const names = spec.split(".");
        const name = names.shift();
        const node = this.nodes[name ?? ""];
        // log( "get !", name, node != null );
        if (node)
            return node;
    }
}
const NF = {
    "Osc"(args, ac) {
        const node = ac.createOscillator();
        node.start();
        return node;
    },
    "Gain"(args, ac) {
        const node = ac.createGain();
        node.gain.value = 0;
        return node;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cy1zcmMvYXBwcy9WRi9BdWRpby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFMUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBRSxJQUFxQixFQUFFLEVBQWlCLEVBQUUsSUFBa0IsRUFBRyxFQUFFO0lBRXhGLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFFLElBQUksRUFBRSxFQUFFLENBQUUsQ0FBQztJQUV4QyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSTtRQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBRSxDQUFDO0FBQzdFLENBQUMsQ0FBQTtBQTBDRCxNQUFNO0FBRU4sTUFBTSxTQUFTO0lBSzhCO0lBSDVDLE1BQU0sR0FBa0MsRUFBRSxDQUFDO0lBQzNDLEtBQUssR0FBa0MsRUFBRSxDQUFDO0lBRTFDLFlBQWEsSUFBcUIsRUFBVSxFQUFpQjtRQUFqQixPQUFFLEdBQUYsRUFBRSxDQUFlO1FBRTVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFDbEI7WUFDQyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUFJLElBQUksQ0FBQyxXQUFXLENBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztTQUNwRjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFDZDtZQUNDLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7Z0JBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUs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