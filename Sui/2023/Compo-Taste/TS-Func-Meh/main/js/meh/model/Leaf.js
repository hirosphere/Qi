const log = console.log;
class LeafBase {
    _value;
    _rel;
    nextRefId = 1;
    refs = new Map();
    constructor(initv, args) {
        this._value = initv;
        this._rel = args?.rel;
    }
    _setvalue(newValue, sender) {
        if (newValue === this._value)
            return;
        const oldValue = this._value;
        this._value = newValue;
        this._rel?.(newValue, oldValue);
        this.refs.forEach(ref => ref != sender && ref.update(newValue, oldValue));
    }
}
export class Leaf extends LeafBase {
    static make(lol) {
        if (lol instanceof Leaf)
            return lol;
        return new Leaf(lol);
    }
    static set(lol, newValue) {
        if (lol instanceof Leaf)
            lol.value = newValue;
    }
    createRef(update) {
        const id = this.nextRefId++;
        const ref = new Leaf.Ref(this, id, update);
        this.refs.set(id, ref);
        return ref;
    }
    releaseRef(ref) {
        this.refs.delete(ref.id);
    }
    get value() { return this._value; }
    set value(newValue) { this._setvalue(newValue); }
    set(value, sender) { this._setvalue(value, sender); }
}
(function (Leaf) {
    //  //
    class String extends Leaf {
    }
    Leaf.String = String;
    class Number extends Leaf {
    }
    Leaf.Number = Number;
    class Boolean extends Leaf {
    }
    Leaf.Boolean = Boolean;
    class Ref {
        source;
        id;
        update;
        refs = new Map();
        constructor(source, id, update) {
            this.source = source;
            this.id = id;
            this.update = update;
            if (this.source)
                this.update(this.source?.value);
        }
        release() {
            this.source?.releaseRef(this);
            this.source = null;
        }
    }
    Leaf.Ref = Ref;
})(Leaf || (Leaf = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvTGVhZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQWUsUUFBUTtJQUVaLE1BQU0sQ0FBTTtJQUNkLElBQUksQ0FBdUI7SUFDekIsU0FBUyxHQUFZLENBQUMsQ0FBQztJQUN2QixJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7SUFFdEQsWUFBYSxLQUFTLEVBQUUsSUFBbUI7UUFFMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDO0lBQ3ZCLENBQUM7SUFFUyxTQUFTLENBQUUsUUFBWSxFQUFFLE1BQWM7UUFFaEQsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLE1BQU07WUFBSSxPQUFPO1FBRXZDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFFdkIsSUFBSSxDQUFDLElBQUssRUFBRSxDQUFFLFFBQVEsRUFBRSxRQUFRLENBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBRSxRQUFRLEVBQUUsUUFBUSxDQUFFLENBQUUsQ0FBQztJQUMvRSxDQUFDO0NBQ0Q7QUFpQkQsTUFBTSxPQUFPLElBQVUsU0FBUSxRQUFhO0lBRTNDLE1BQU0sQ0FBQyxJQUFJLENBQVEsR0FBbUI7UUFFckMsSUFBSSxHQUFHLFlBQVksSUFBSTtZQUFHLE9BQU8sR0FBRyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxJQUFJLENBQVMsR0FBRyxDQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQVEsR0FBZ0MsRUFBRSxRQUFZO1FBRS9ELElBQUksR0FBRyxZQUFZLElBQUk7WUFBRyxHQUFHLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFFLE1BQTBCO1FBRTNDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUcsQ0FBQztRQUM3QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUUsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFDekIsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDO0lBRU0sVUFBVSxDQUFFLEdBQW9CO1FBRXRDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxLQUFLLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFXLEtBQUssQ0FBRSxRQUFZLElBQUssSUFBSSxDQUFDLFNBQVMsQ0FBRSxRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFFekQsR0FBRyxDQUFFLEtBQVMsRUFBRSxNQUF5QixJQUFLLElBQUksQ0FBQyxTQUFTLENBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQztDQUV2RjtBQUVELFdBQWlCLElBQUk7SUFFcEIsTUFBTTtJQUVOLE1BQWEsTUFBTyxTQUFRLElBQWU7S0FBRztJQUFqQyxXQUFNLFNBQTJCLENBQUE7SUFDOUMsTUFBYSxNQUFPLFNBQVEsSUFBZTtLQUFHO0lBQWpDLFdBQU0sU0FBMkIsQ0FBQTtJQUM5QyxNQUFhLE9BQVEsU0FBUSxJQUFnQjtLQUFHO0lBQW5DLFlBQU8sVUFBNEIsQ0FBQTtJQWNoRCxNQUFhLEdBQUc7UUFNTjtRQUNRO1FBQ0E7UUFOUCxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFFakQsWUFFUyxNQUEwQixFQUNsQixFQUFVLEVBQ1YsTUFBcUI7WUFGN0IsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7WUFDbEIsT0FBRSxHQUFGLEVBQUUsQ0FBUTtZQUNWLFdBQU0sR0FBTixNQUFNLENBQWU7WUFHckMsSUFBSSxJQUFJLENBQUMsTUFBTTtnQkFBRyxJQUFJLENBQUMsTUFBTSxDQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFFLENBQUM7UUFDckQsQ0FBQztRQUVNLE9BQU87WUFFYixJQUFJLENBQUMsTUFBTyxFQUFFLFVBQVUsQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDO0tBQ0Q7SUFuQlksUUFBRyxNQW1CZixDQUFBO0FBQ0YsQ0FBQyxFQXhDZ0IsSUFBSSxLQUFKLElBQUksUUF3Q3BCIn0=