import { Leaf } from "../model/Leaf.js";
const log = console.log;
//
export var ef;
(function (ef) {
    ef.div = (args) => ({ type: "div", ...args });
    ef.h2 = (args) => ({ type: "h2", ...args });
})(ef || (ef = {}));
class Component {
    pfs = new Array();
    refs = new Array();
    classSwitch = new Array;
    constructor(def, ce) {
        this.createNode(def, ce);
    }
    createNode(def, ce) {
        if (def instanceof Leaf || typeof def == "string" || typeof def == "number" || typeof def == "boolean") {
            this.createTextNode(def, ce);
        }
        else if (typeof def == "object")
            this.createElement(def, ce);
    }
    createElement(def, ce) {
        if (!def.type)
            return;
        const e = document.createElement(def.type);
        const { class: classname, attrs, props, style, acts, text, parts } = def;
        if (classname)
            this.bindClass(e, classname);
        if (attrs)
            for (let name in attrs)
                this.bindAttr(e, name, attrs[name]);
        if (props)
            this.bindProps(e, props);
        if (style)
            for (let name in style)
                this.bindStyle(e, name, style[name]);
        if (acts)
            for (let name in acts)
                e.addEventListener(name, acts[name]);
        if (text != null)
            this.bindProp(e, "textContent", text);
        if (parts)
            new PartsFragment(this, e, parts);
        if (ce)
            ce.appendChild(e);
    }
    createTextNode(value, ce) {
        log(value);
        const n = document.createTextNode("");
        if (value instanceof Leaf) { }
        else
            n.nodeValue = String(value);
        ce?.appendChild(n);
    }
    bindClass(e, value) {
        if (typeof value == "string")
            e.className = value;
        else
            this.classSwitch.push(new ClassSwitch(e, value));
    }
    bindAttr(e, name, lol) {
        if (lol == null)
            return;
        if (lol instanceof Leaf) {
            const update = () => e.setAttribute(name, String(lol.value));
            this.refs.push(lol.createRef(update));
        }
        else
            e.setAttribute(name, String(lol));
    }
    bindProps(e, props) {
        for (let name in props) {
            this.bindProp(e, name, props[name]);
        }
    }
    bindProp(e, name, lol) {
        if (lol == null)
            return;
        if (lol instanceof Leaf) {
            const update = () => setProp(e, name, lol.value);
            this.refs.push(lol.createRef(update));
        }
        else
            setProp(e, name, lol);
    }
    bindStyle(e, name, lol) {
        if (lol instanceof Leaf) {
            ;
        }
        else if (lol != null)
            e.style.setProperty(name, String(lol));
    }
    terminate() {
        this.refs.forEach(ref => ref.release());
    }
}
const setProp = (e, name, value) => {
    if (name == "value") {
        if ((e instanceof HTMLInputElement || e instanceof HTMLTextAreaElement)) {
            e[name] = String(value);
        }
    }
    else
        e[name] = String(value);
};
//  //
class ClassSwitch {
    refs = new Array;
    constructor(e, value) {
        for (let className in value)
            this.makeItem(e, className, value[className]);
    }
    makeItem(e, className, lol) {
        if (lol instanceof Leaf) {
            const update = () => e.classList.toggle(className, lol.value);
            this.refs.push(lol.createRef(update));
        }
        else
            e.classList.toggle(className, lol);
    }
    terminate() {
        this.refs.forEach(ref => ref.release());
    }
}
//  //
class PartsFragment {
    constructor(compo, e, arg) {
        compo.pfs.push(this);
        arg.forEach(partdef => compo.createNode(partdef, e));
    }
}
//  //
export const create = (def, ce) => {
    if (typeof ce == "string") {
        const ce2 = document.querySelector(ce);
        if (ce2)
            new Component(def, ce2);
    }
    else if (ce instanceof Element)
        new Component(def, ce);
    // log( ce, JSON.stringify( def, null, "\t" ) );
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMtc3JjL21laC9kb20vQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBTXhCLEVBQUU7QUFFRixNQUFNLEtBQVcsRUFBRSxDQUlsQjtBQUpELFdBQWlCLEVBQUU7SUFFTCxNQUFHLEdBQUcsQ0FBRSxJQUFtQixFQUFHLEVBQUUsQ0FBQyxDQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFJLElBQUksRUFBRSxDQUFFLENBQUM7SUFDL0QsS0FBRSxHQUFHLENBQUUsSUFBbUIsRUFBRyxFQUFFLENBQUMsQ0FBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBSSxJQUFJLEVBQUUsQ0FBRSxDQUFDO0FBQzNFLENBQUMsRUFKZ0IsRUFBRSxLQUFGLEVBQUUsUUFJbEI7QUF1Q0QsTUFBTSxTQUFTO0lBRWQsR0FBRyxHQUFHLElBQUksS0FBSyxFQUFxQixDQUFDO0lBQ3JDLElBQUksR0FBRyxJQUFJLEtBQUssRUFBVyxDQUFDO0lBQzVCLFdBQVcsR0FBRyxJQUFJLEtBQXFCLENBQUM7SUFFeEMsWUFBYSxHQUFlLEVBQUUsRUFBWTtRQUV6QyxJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUcsRUFBRSxFQUFFLENBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsVUFBVSxDQUFFLEdBQWUsRUFBRSxFQUFZO1FBRXhDLElBQUksR0FBRyxZQUFZLElBQUksSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxJQUFJLE9BQU8sR0FBRyxJQUFJLFNBQVMsRUFDdEc7WUFDQyxJQUFJLENBQUMsY0FBYyxDQUFFLEdBQUcsRUFBRSxFQUFFLENBQUUsQ0FBQztTQUMvQjthQUVJ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