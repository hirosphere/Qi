
const モデル群 = {};


モデル群.ドキュメントの型 = 拡張型を作成
(
	値セル群.オブジェクトの型,
	
	function( 基底典型 )
	{
		const 典型 = this;

		典型.初期化 = function()
		{
			const これ = this;
			基底典型.初期化.call( これ );

			これ.値フィールドを追加( "Ti", "0123" );
			これ.値フィールドを追加( "Tmp", 120 );
			これ.値フィールドを追加( "TP", 0 );
			これ.値フィールドを追加( "Tun", 440 );

			これ.値フィールドを追加( "TSs", [ "Tn1", "Tn2" ] );

			これ.フィールドを追加( "Tns", new モデル群.音色群の型() );

			これ.値フィールドを追加( "Wave", [ "100/Squ/1/3.5", "100/Saw/2/3.5" ] );
			これ.フィールドを追加( "EG1", モデル群.EGの型.実体を作成( "4/1000/0/400" ) );
		};
	}
);

モデル群.音色群の型 = function()
{
	const これ = this;

	const 省略値 =
	{
		"Ba": モデル群.音色の型.実体を作成(),
		"Ch": モデル群.音色の型.実体を作成(),
		"Mel": モデル群.音色の型.実体を作成(),
	};

	let 値 = 省略値;

	これ.永続値を設定 = function( 設定値 )
	{
		if( 設定値 && 設定値.prototype == Object )
		{
			値 = {};
			for( let 名 in 設定値 )
			{
				値[ 名 ] = 音色の型.実体を作成( 設定値[ 名 ] );
			}
		}

		else   値 = 省略値;
	};
	
	これ.永続値を取得 = function()
	{
		const 返り値 = {};
		for( let 名 in 値 ) 返り値[ 名 ] = 値[ 名 ].永続値を取得();
		return 返り値;
	};

	これ.値を設定 = function( 設定値 )
	{
		for( let 名 in 値 ) 値[ 名 ].値を設定( 設定値[ 名 ] );
	};
	
	これ.値を取得 = function()
	{
		const 返り値 = {};
		for( let 名 in 値 ) 返り値[ 名 ] = 値[ 名 ].値を取得();
		return 返り値;
	};
	
};

モデル群.音色の型 = 拡張型を作成
(
	値セル群.オブジェクトの型,
	
	function( 基底典型 )
	{
		const 典型 = this;

		典型.初期化 = function()
		{
			const これ = this;
			基底典型.初期化.call( これ );

			これ.値フィールドを追加( "WF", [ "100/Squ/1/3", "100/Saw/2/3" ] );
			これ.フィールドを追加( "EG", モデル群.EGの型.実体を作成( "70/600/70/600" ) );
		};

		典型.永続値を設定 = function( 永続値 )
		{
			基底典型.永続値を設定.call( this, 永続値 );
			console.log( 永続値 );
		}
	}
);

モデル群.EGの型 = 拡張型を作成
(
	値セル群.実値の型,
	
	function( 基底プロトタイプ )
	{
		const プロトタイプ = this;

		プロトタイプ.初期化 = function( 省略値, 取得時の省略 )
		{
			const これ = this;
			基底プロトタイプ.初期化.call( これ, 省略値, 取得時の省略 );
		};

		プロトタイプ.値を設定 = function( 値 )
		{
			const これ = this;
			基底プロトタイプ.値を設定.call( これ, 値 );

			const 配列 = ( 値 != null && 値.constructor == String ? 値.split( "/" ) : [] );
			
			これ.A = ( 配列[ 0 ] != undefined ? 配列[ 0 ] : 3 );
			これ.D = ( 配列[ 1 ] != undefined ? 配列[ 1 ] : 1000 );
			これ.S = ( 配列[ 2 ] != undefined ? 配列[ 2 ] : 0 );
			これ.R = ( 配列[ 3 ] != undefined ? 配列[ 3 ] : 400 );

			console.log( "EG", 値, 配列, これ.A , これ.D , これ.S , これ.R  );
		};

		プロトタイプ.永続値を設定 = function( 永続値 )
		{
			const v = 基底プロトタイプ.値を取得.call( this );
			console.log( "EG 永続値 >>", 永続値, v );
			return v;
		}
	}
);


