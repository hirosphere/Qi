
let 値の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function( 初期値, 変更処理 )
		{
			let この実体 = this;

			この実体.変更処理リスト = {};
			この実体.既定値 = この実体.値 = 初期値;
			if( 変更処理 ) この実体.変更処理を登録( 変更処理 );
		};

		この型.変更処理を登録 = この型.変更処理を追加 = function( 処理, 即時実行 )
		{
			let この実体 = this;

			この世界.次の連番( 処理 );
			この実体.変更処理リスト[ 処理.実行時連番 ] = 処理;
			即時実行 && 処理( この実体.値 );
		};

		この型.変更処理を削除 = function( 処理 )
		{
			let この実体 = this;

			if( この実体.変更処理リスト[ 処理.実行時連番 ] ) delete この実体.変更処理リスト[ 処理.実行時連番 ];
		};

		この型.値を設定 = function( 値 )
		{
			let この実体 = this;
			if( この実体.値 !== 値 )
			{
				この実体.値 = 値;
				この実体.値の変更を通知する();
			}
			return 値;
		};

		この型.値の変更を通知する = function()
		{
			let この実体 = this;
			for( let 連番 in この実体.変更処理リスト )  この実体.変更処理リスト[ 連番 ]( この実体.値 );
		};
	}
);
let セルの型 = 値の型;

let 数値セルの型 = 拡張型を作成
(
	セルの型,
	function( 基底の典型 )
	{
		let この典型 = this;

		この典型.型名 = "数値";

		この典型.値を設定 = function( 値, 変更処理をしない )
		{
			let この実体 = this;
			基底の典型.値を設定.call( この実体, 値 - 0, 変更処理をしない );
		};

		この典型.ハッシュ値を作成 = function( 小数制限 )
		{
			;
		};
	}
);

const オブジェクトセルの型 = 型を作成
(
	function()
	{
		const この典型 = this;

		この典型.型名 = "オブジェクト";

		この典型.開始する = function(  )
		{
			const この実体 = this;
		};

		この典型.数値セルを作成 = function( 名称, ハッシュ名, 設定 )
		{
			const この実体 = this;
		};
	}
);
