
let ドキュメントの型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function()
		{
			let この実体 = this;

			この実体.コマ秒;
			この実体.コマ数 = 数値セルの型.作成( 10 );

			この実体.表題 = セルの型.作成( "" );
			この実体.動力選択 = セルの型.作成( "19-80" );
			この実体.列車 = 列車の型.作成();


			// イベント処理 //

			この実体.動力選択.変更処理を追加( ( 名称 ) => この実体.動力選択が更新( 名称 ), はい );

			function コマ処理()
			{
				この実体.列車.進歩する( この実体.コマ秒 );
			}

			let 間欠番号;
			この実体.コマ数.変更処理を追加
			(
				()=>
				{
					if( 間欠番号 ) 間欠を解除( 間欠番号 );
					この実体.コマ秒 = 1 / この実体.コマ数.値;
					間欠番号 = 間欠を設定( コマ処理, この実体.コマ秒 * 1000 );
				},
				はい
			);

		};

		この典型.動力選択が更新 = function( 名称 )
		{
			let この実体 = this;

			const 項目 = この典型.動力設定リスト[ 名称 ];
			if( 項目 == なし ) return;

			この実体.列車.動力.駆動歯数.値を設定( 項目[ 0 ] );
			この実体.列車.動力.被動歯数.値を設定( 項目[ 1 ] );
			この実体.列車.動力.冷却ファン羽数.値を設定( 項目[ 2 ] );
			この実体.列車.動力.整流子数.値を設定( 項目[ 3 ] );
			この実体.列車.動力.車輪径.値を設定( 項目[ 4 ] );
			この実体.列車.加速度減衰率.値を設定( 項目[ 5 ] );
			この実体.表題.値を設定( 項目[ 6 ] );
		};

		この典型.動力設定リスト =
		{
			"15-91": [ 15, 91, 12, 42, 910, 0.65, "国鉄 103系" ],
			"16-91": [ 16, 91, 12, 42, 860, 0.55, "東武 8000系" ],
			"17-82": [ 17, 82, 12, 42, 860, 0.55, "国鉄 115系" ],
			"19-80": [ 19, 80, 12, 42, 860, 0.50, "国鉄 165系" ],
			"22-77": [ 22, 77, 12, 42, 860, 0.45, "国鉄 485系" ],
		};

	}
);

let 列車の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function()
		{
			let この実体 = this;

			// 入力 //

			この実体.指令加速度 = 値の型.作成( 0 );
			この実体.加速度減衰率 = 値の型.作成( 0.65 );
			この実体.環境加速度 = 値の型.作成( -0.08 );

			// 出力 //

			この実体.調整指令加速度 = 値の型.作成( 0 );
			この実体.加速度 = 値の型.作成( 0 );
			この実体.時速 = 値の型.作成( 0 );

			// 配下 //

			この実体.動力 = 動力の型.作成( この実体 );
		};

		この型.進歩する = function( 進歩秒 )
		{
			let この実体 = this;

			let 指令加速度 = この実体.指令加速度.値;
			let 環境加速度 = この実体.環境加速度.値;
			let 時速 = この実体.時速.値;

			let 加速度減衰率 = ( 指令加速度 > 0 ? 1 - 時速 / 100 * この実体.加速度減衰率.値 : 1 );
			let 調整指令加速度 = 指令加速度 * 加速度減衰率;
			let 加速度 = ( 環境加速度 - 0 ) + ( 調整指令加速度 - 0 );

			この実体.調整指令加速度.値を設定( 調整指令加速度 );
			この実体.加速度.値を設定( 加速度 );


			この実体.時速.値を設定( Math.max( 0, ( この実体.時速.値 - 0 ) + この実体.加速度.値 * 進歩秒 ) );
		};
	}
);

let 動力設定リスト =
{
	// [ 整流, ブラシ音種, 駆動歯数, 被動歯数 ]
	
	"国鉄 103": [ "国鉄 103", 15, 91 ],
	"JR E231 近郊": [ "JR E231 近郊", 14, 99 ],
};

let 動力の型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 列車 )
		{
			let この実体 = this;
			この実体.列車 = 列車;

			//  入力  //
			
			この実体.駆動歯数 = 値の型.作成( 15, 更新処理 );
			この実体.被動歯数 = 値の型.作成( 91, 更新処理 );
			この実体.車輪径 = 値の型.作成( 910, 更新処理 );

			この実体.冷却ファン羽数 = 値の型.作成( 12 );
			この実体.整流子数 = 値の型.作成( 42 );

			//  出力  //

			この実体.減速比 = 値の型.作成( 1 );
			この実体.噛み合い周波数 = 値の型.作成( 0 );
			この実体.車輪回転周波数 = 値の型.作成( 0 );
			この実体.モーター周波数 = 値の型.作成( 0 );
			この実体.ファン周波数 = 値の型.作成( 0 );
			この実体.整流子周波数 = 値の型.作成( 0 );

			//  変更処理の設定  //
			
			列車.時速.変更処理を登録( ()=> この実体.速度関連を更新(), はい );

			function 更新処理()
			{
				この実体.減速比.値を設定( この実体.被動歯数.値 / この実体.駆動歯数.値 );
				この実体.速度関連を更新();
			}

			更新処理();
		};

		この典型.速度関連を更新 = function()
		{
			let この実体 = this;
			let 秒速mm = この実体.列車.時速.値 / 3600 * 1000 * 1000;

			この実体.車輪回転周波数.値を設定( 秒速mm / ( この実体.車輪径.値 * Math.PI ) );
			この実体.噛み合い周波数.値を設定( この実体.車輪回転周波数.値 * この実体.被動歯数.値 );
			この実体.モーター周波数.値を設定( この実体.噛み合い周波数.値 / この実体.駆動歯数.値 );
			この実体.ファン周波数.値を設定( この実体.モーター周波数.値 * この実体.冷却ファン羽数.値 );
			この実体.整流子周波数.値を設定( この実体.モーター周波数.値 * この実体.整流子数.値 );
		};
	}
);

let 動力駆動の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function()
		{
			let この実体 = this;
		};
	}
);

