
let ドキュメントの型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function()
		{
			let この実体 = this;
			この実体.コマ秒 = 0.05;


			この実体.列車 = 列車の型.作成();

			function コマ処理()
			{
				この実体.列車.進歩する( この実体.コマ秒 );
			}

			間欠を設定( コマ処理, この実体.コマ秒 * 1000 );
		};
	}
);

let 列車の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function()
		{
			let この実体 = this;

			// 入力 //

			この実体.指令加速度 = 値の型.作成( 0 );
			この実体.加速度減衰率 = 値の型.作成( 0.65 );
			この実体.環境加速度 = 値の型.作成( -0.15 );

			// 出力 //

			この実体.減衰加速度 = 値の型.作成( 0 );
			この実体.加速度 = 値の型.作成( 0 );
			この実体.時速 = 値の型.作成( 0 );

			// 配下 //

			この実体.動力 = 動力の型.作成( この実体 );
		};

		この型.進歩する = function( 進歩秒 )
		{
			let この実体 = this;

			let 指令加速度 = この実体.指令加速度.値;
			let 環境加速度 = この実体.環境加速度.値;
			let 時速 = この実体.時速.値;

			let 加速度減衰率 = ( 指令加速度 > 0 ? 1 - 時速 / 100 * この実体.加速度減衰率.値 : 1 );
			let 減衰加速度 = 指令加速度 * 加速度減衰率;
			let 加速度 = 環境加速度 + 減衰加速度;

			この実体.減衰加速度.値を設定( 減衰加速度 );
			この実体.加速度.値を設定( 加速度 );


			この実体.時速.値を設定( Math.max( 0, この実体.時速.値 + この実体.加速度.値 * 進歩秒 ) );
		};
	}
);

let 動力設定リスト =
{
	// [ 整流, ブラシ音種, 駆動歯数, 被動歯数 ]
	
	"国鉄 103": [ "国鉄 103", 15, 91 ],
	"JR E231 近郊": [ "JR E231 近郊", 14, 99 ],
};

let 動力の型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 列車 )
		{
			let この実体 = this;
			この実体.列車 = 列車;

			//  入力  //
			
			この実体.駆動歯数 = 値の型.作成( 15 );
			この実体.被動歯数 = 値の型.作成( 91 );
			この実体.車輪径 = 値の型.作成( 860 );

			この実体.冷却ファン羽数 = 値の型.作成( 12 );
			この実体.排気穴数 = 値の型.作成( 42 );

			//  出力  //

			この実体.減速比 = 値の型.作成( 1 );
			この実体.噛み合い周波数 = 値の型.作成( 0 );
			この実体.車輪周波数 = 値の型.作成( 0 );
			この実体.モーター周波数 = 値の型.作成( 0 );
			この実体.ファン周波数 = 値の型.作成( 0 );
			この実体.排気穴周波数 = 値の型.作成( 0 );

			console.log( 列車.時速 );
			列車.時速.変更された( ()=> この実体.出力を更新() );
		};

		この典型.出力を更新 = function()
		{
			let この実体 = this;
			この実体.減速比.値を設定( この実体.被動歯数.値 / この実体.駆動歯数.値 );
		};
	}
);

let 動力駆動の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function()
		{
			let この実体 = this;
		};
	}
);

let 値の型 = 型を作成
(
	function()
	{
		let この型 = this;

		この型.開始する = function( 初期値, 変更処理 )
		{
			let この実体 = this;
			この実体.変更処理リスト = ( 変更処理 ? [ 変更処理 ] : [] );
			この実体.初期値 = この実体.値 = 初期値;
		};

		この型.変更された = function( 処理 )
		{
			let この実体 = this;
			この実体.変更処理リスト.push( 処理 );
			処理();
		};

		この型.値を設定 = function( 値 )
		{
			let この実体 = this;
			if( この実体.値 == 値 )  return;

			この実体.値 = 値;
			この実体.値の変更を通知する();
		};

		この型.値の変更を通知する = function()
		{
			let この実体 = this;
			for( let 処理 of この実体.変更処理リスト )  処理();
		};
	}
);
