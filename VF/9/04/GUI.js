
let 運転制御盤1の型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 幹エレメント, クラス名, 列車, 選択器 )
		{
			let この実体 = this;

			let この枝 = Divを作成( 幹エレメント, { クラス: クラス名 } );
			数値表示ペイン1を作成( この枝, 列車, 選択器 );
			加速度指令ペインを作成( この枝, 列車 );
		};

		//

		let 数値表示ペイン1を作成 = function( 幹エレメント, 列車, 選択器 )
		{
			let テーブル = 数値表示テーブルの型.作成( 幹エレメント, "VT1" );
			let 行 = テーブル.行を作成();
			行.項目を作成3( "指令加速度", 列車.指令加速度, true, [ 1, "km/h/s" ], [], 選択器 );
			行.項目を作成3( "減衰加速度", 列車.減衰加速度, false, [ 1, "km/h/s" ], [], 選択器 );
			行.項目を作成3( "時速", 列車.時速, false, [ 0, "km/h" ], [], 選択器 );
		};

		let 加速度リスト = [ -5, -3, -2, -1, 0, 1, 2, 3, 5 ];

		let 加速度指令ペインを作成 = function( 幹エレメント, 列車 )
		{
			let この枝 = Divを作成( 幹エレメント, {} );

			for( let 番号 in 加速度リスト )
			{
				let 加速度 = 加速度リスト[ 番号 ];
				let ボタン = Buttonを作成( この枝, { 文: 加速度 } );
				ボタン.クリック処理を追加( ()=> 列車.指令加速度.値を設定( 加速度 ) );
			}
		}
	}
);

let 項目表示1の型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 幹エレメント, クラス名, 列車, シンセ, 選択器 )
		{
			const この実体 = this;
			const エレメント = Divを作成( 幹エレメント, { クラス: クラス名 } );
			let 動力 = 列車.動力;

			let テーブル = 数値表示テーブルの型.作成( エレメント, "VT2" );

			{
				let 行 = テーブル.行を作成();

				行.項目を作成3( "加速度減衰率", 列車.加速度減衰率, true, [ 1, "%", (v)=>v*100, (d)=>d/100 ], [ 0, 100, 1 ], 選択器 );
				行.項目を作成3( "環境加速度", 列車.環境加速度, true, [ 2, "km/h/s" ], [], 選択器 );
				行.項目を作成3( "加速度", 列車.加速度, false, [ 2, "km/h/s" ], [], 選択器 );
				行.項目を作成3( "秒速", 列車.時速, false, [ 1, "m/s", (v)=>v/3.6, (v)=>v*3.6 ], [], 選択器 );
				行.項目を作成3( "音量", シンセ.全音量, はい, [ 1, "" ], [ 0, 100, 1 ], 選択器 );
			}

			{
				let 行 = テーブル.行を作成();
				行.項目を作成3(	"モーター周波数",	動力.モーター周波数,	false,	[ 1, "Hz" ], [],	選択器 );
				行.項目を作成3( 	"ファン周波数",		動力.ファン周波数,		false,	[ 1, "Hz" ], [],	選択器 );
				行.項目を作成3(	"噛み合い周波数",	動力.噛み合い周波数,	false,	[ 1, "Hz" ], [],	選択器 );
				行.項目を作成3(	"整流子周波数",		動力.整流子周波数,		false,	[ 1, "Hz" ], [],	選択器 );
				行.項目を作成3(	"車輪回転周波数",	動力.車輪回転周波数,	false,	[ 1, "Hz" ], [],	選択器 );
			}

			{
				let 行 = テーブル.行を作成();

				行.項目を作成2
				(
					{
						表題: "冷却ファン羽数", セル: 動力.冷却ファン羽数,
						可変: はい, 選択器: 選択器
					}
				);

				行.項目を作成2
				(
					{
						表題: "駆動歯数",  セル: 動力.駆動歯数,
						可変: はい,
						選択器: 選択器
					}
				);

				行.項目を作成2
				(
					{
						表題: "被動歯数",
						セル: 動力.被動歯数,
						可変: はい,
						選択器: 選択器
					}
				);

				行.項目を作成2
				(
					{
						表題: "減速比",  セル: 動力.減速比,  可変: いいえ,
						表示: { 小数長: 2 },
						選択器: 選択器
					}
				);

				行.項目を作成2
				(
					{
						表題: "整流子数",
						セル: 動力.整流子数,
						可変: はい,
						選択器: 選択器
					}
				);

				行.項目を作成2
				(
					{
						表題: "車輪径",
						表示: { 単位: "mm" },
						セル: 動力.車輪径,
						可変: はい,
						選択器: 選択器
					}
				);
			};
		};
	}
);

let 数値表示テーブルの型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 幹エレメント, クラス名 )
		{
			let この実体 = this;

			let table = Tableを作成( 幹エレメント, { クラス: クラス名 } );
			この実体.tbody = TBodyを作成( table );
		};

		この典型.行を作成 = function()
		{
			return new 行の型( this.tbody );
		};

		let 行の型 = function( tbody )
		{
			let この実体 = this;
			let 題行TR = TRを作成( tbody, { クラス: "_TROW" } );
			let 値行TR = TRを作成( tbody, { クラス: "_VROW" } );

			この実体.項目を作成2 = function( 表示設定 )
			{
				return 数値表示テーブル項目2の型.作成( 題行TR, 値行TR, 表示設定 );
			};

			この実体.項目を作成3 = function( 表題, セル, 可変, 表示設定, スライダー, 選択器 )
			{
				return 数値表示テーブル項目2の型.作成( 題行TR, 値行TR,
					{ 表題: 表題, セル: セル, 可変: 可変, 選択器: 選択器,
						表示: { 小数長: 表示設定[ 0 ], 単位: 表示設定[ 1 ], 値から表示へ: 表示設定[ 2 ], 表示から値へ: 表示設定[ 3 ] },
						スライダー: { 下限: スライダー[ 0 ], 上限: スライダー[ 1 ], 段階: スライダー[ 2 ], 粗段階: スライダー[ 3 ] },
					} );
			};
		}
	}
);

const 数値表示テーブル項目2の型 = 型を作成
(
	function()
	{
		const この典型 = this;

		この典型.開始する = function( 題TR, 値TR, 設定 )
		{
			const この実体 = this;

			設定.表示 = 設定.表示 || {};
			この実体.設定 = 設定;
			この実体.値から表示へ = 設定.表示 && 設定.表示.値から表示へ || ( (v)=>v );

			この実体.題TD = TDを作成( 題TR, { クラス: "_TITLE" + ( 設定.可変 ? " _EDITABLE" : "" ), 文: 設定.表題 } );
			この実体.値TD = TDを作成( 値TR, { クラス: "_VCELL" } );
			{
				この実体.選択枠Span = Spanを作成( この実体.値TD, { クラス: "_SELFRAME" } );
				{
					この実体.値Span =
					Spanを作成( この実体.選択枠Span, { クラス: "_VALUE" } );
					Spanを作成( この実体.選択枠Span, { クラス: "_UNIT", 文: 設定.表示.単位 || "" } );
				}
			}

			この実体.値TD.onmousedown = function() { if( 設定.選択器 ) 設定.選択器.選択( この実体 ) };

			設定.セル && 設定.セル.変更された( ()=> この実体.数値表示を更新(), はい );
		};

		この典型.選択状態を設定 = function( 値 )
		{
			const この実体 = this;

			値 ?
				この実体.選択枠Span.classList.add( "_SELECTED" ) :
				この実体.選択枠Span.classList.remove( "_SELECTED" )
			;
		};

		この典型.数値表示を更新 = function()
		{
			const これ = this;

			これ.値Span.文を設定
			(
				小数を整理
				(
					これ.値から表示へ( これ.設定.セル.値 ),
					これ.設定.表示 && これ.設定.表示.小数長 || 0
				)
			);
		};
	}
);

const 単一選択の型 = 拡張型を作成
(
	値の型,
	function( 基底の典型 )
	{
		let この典型 = this;

		この典型.開始する = function()
		{
			let この実体 = this;
			基底の典型.開始する.call( この実体 );

			この実体.カレント = なし;
		};

		この典型.選択 = function( 項目 )
		{
			let この実体 = this;
			
			if( この実体.値 == 項目 )  return;

			この実体.値 && この実体.値.選択状態を設定( いいえ );
			この実体.値を設定( 項目 );
			この実体.値 && この実体.値.選択状態を設定( はい );
		};
	}
);



let タブ切り替えペインの型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 幹エレメント, クラス名 )
		{
			let この実体 = this;
			この実体.セル = なし;

			この実体.エレメント = Divを作成( 幹エレメント, { クラス: クラス名 } );
		};

		この典型.項目を設定 = function( 項目 )
		{
			let この実体 = this;

			この実体.文字入力.value = ( 項目 ? 項目.表示設定.セル.値 : "" );
		};
	}
);


let 数値入力ペインの型 = 型を作成
(
	function()
	{
		let この典型 = this;

		この典型.開始する = function( 幹エレメント, クラス名 )
		{
			let この実体 = this;

			let エレメント = Divを作成( 幹エレメント, { クラス: クラス名 } );
			この実体.表題表示 = Spanを作成( エレメント, { クラス: "_TITLE" } );
			この実体.文字入力 = Inputを作成( エレメント, { クラス: "_TEXT" } );
			この実体.単位表示 = Spanを作成( エレメント, { クラス: "_UNIT" } );
			この実体.スライダー = Inputを作成( エレメント, { クラス: "_RANGE", 属性: { type: "range" } } );

			この実体.値変更処理 = () => この実体.表示を更新();

			この実体.文字入力.変更処理を追加( () => この実体.文字入力を反映() );
		};

		この典型.項目を設定 = function( 項目 )
		{
			let この実体 = this;

			if( この実体.項目 ) この実体.項目.設定.セル.変更処理を削除( この実体.値変更処理 );
			
			この実体.項目 = 項目;

			let 設定 = 項目 && 項目.設定;
			let 表示設定 = 設定 && 設定.表示;
			この実体.値から表示へ = 表示設定 && 表示設定.値から表示へ || ( ( v ) => v );
			この実体.表示から値へ = 表示設定 && 表示設定.表示から値へ || ( ( d ) => d );
			この実体.表題表示.文を設定( 設定 && 設定.表題 || "" );
			この実体.単位表示.文を設定( 表示設定 && 表示設定.単位 || "" );
			if( 項目 ) この実体.項目.設定.セル.変更処理を登録( この実体.値変更処理, はい );
		};

		この典型.文字入力を反映 = function()
		{
			let この実体 = this;
			let セル = この実体.項目 && この実体.項目.設定.セル;
			
			セル && セル.値を設定( この実体.表示から値へ( この実体.文字入力.value ) );
		};

		この典型.表示を更新 = function()
		{
			let この実体 = this;
			let セル = この実体.項目 && この実体.項目.設定.セル;
			
			この実体.文字入力.value = ( セル ? この実体.値から表示へ( セル.値 ) : "" );
		};
	}
);
