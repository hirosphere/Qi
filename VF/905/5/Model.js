
const モデル組 = {};

const モデル群 = new function()
{
	const 型定義 = {};

	型定義.応用1 =
	{
		型: "組",
		要素:
		{
			表題: { 型: "文字列" },
			音色1: { 型: "音色A" }
		}
	};

	型定義.応用2 =
	{
		型: "組",
		要素:
		{
			表題: { 型: "文字列" },
			音色1: { 型: "音色A" },
			音色2: { 型: "音色A" }
		}
	};

	型定義.応用3 =
	{
		型: "組",
		要素:
		{
			表題: { 型: "文字列" },
			音色1: { 型: "音色A" }
		}
	};

	型定義.単声A =
	{
		型: "組",
		要素:
		{
			調律: { 型: "数値", 省略可: はい },
			EG1: { 型: "EG" },
			Osc1: "発振器_A",
			Osc2: "発振器_A",
			Osc3: "発振器_A",
			ミキサー: { 型: "ミキサー" }
		}
	};

	型定義.発振器_A = 
	{
		型: "組",
		要素:
		{
			調律: { 型: "数値", 省略可: はい },
			波形: { 型: "波形", 省略可: はい },
			調律: { 型: "数値", 省略可: はい },
		}
	};

	型定義.EG = 
	{
		型: "即値",
		初期値: "1/400/70/4",

		値設定の後処理: () =>
		{
			;
		},

		値取得の前処理: () =>
		{
			;
		},
	}
};

const ドキュメント型 = 拡張型を作成
(
	値セル組.組型,

	function( 基底典型 )
	{
		const 典型 = this;

		典型.構築 = function()
		{
			const これ = this;
			これ.要素固定 = はい;
			これ.実値要素を追加( "Title", "ライディーン" );
			これ.実値要素を追加( "Parts", { M: { Tone: "Tone1" } } );
			これ.要素を追加( "Tones", モデル組.音色組を作成() );
		};
	}
);

モデル組.音色組を作成 = function()
{
	const 設定 =
	{
		要素固定: いいえ,
		
		初期値:
		{
			Tn1:
			{
				WF: [ "1.0/Squ/1/3.0", "1.0/Saw/2/3.0" ],
				Env: "4/1000/60/500"
			}
		},
		
		要素を作成: function( 値 ) {  return モデル組.音色型.実体を作成( 値 );  }
	};
	return 値セル組.組型.実体を作成( 設定 );
};

モデル組.音色型 = 拡張型を作成
(
	値セル組.実値型,

	function( 基底典型 )
	{
		const 典型 = this;
	}
);


